plugins {
    id 'java'
}

repositories {
    maven { 
        url 'https://github.com/sjzeil/mvnrepo/raw/main'
    }
    mavenCentral()
}



dependencies {
    implementation  'edu.odu.cs.zeil:code-grader:+'
}

task clearGrades (type: Delete) {
	 delete 'build/grades'
     doLast {
        mkdir 'build'
     }
}

task codeGrader(type: JavaExec, dependsOn: [clearGrades]) {
  classpath = sourceSets.main.runtimeClasspath
  mainClass = 'edu.odu.cs.zeil.codegrader.run.CLI'

  args '-suite', 'Tests', 
       '-submissions', '.',
       '-inPlace',
       '-recording', 'build'
}


task copyGraderReport1(type: Copy, dependsOn: codeGrader) {
    from 'build/grades/'
    include '*.html'
    into 'build/report.html'
}

task copyGraderReport2(type: Copy, dependsOn: copyGraderReport1) {
    from 'build/grades/'
    include '*.txt'
    into 'build/report.txt'
}

task tests (dependsOn: ['copyGraderReport1']) { // ['copyGraderReport1', 'copyGraderReport2']) {
    doLast {
        File buildDir = new File("build")
        def userName = "*"
        for (File file: buildDir.listFiles()) {
            def name = file.getName()
            if (name.endsWith(".html")) {
                userName = name.substring(0, name.length()-5)
            }
        }
        println '** The grade report is in build/report.html or build/report.txt '
        println '   Other details can be found in the Tests directory **'
    }
}


clean.doLast {
    File testsDir = new File("Tests")
    for (File testCase: testsDir.listFiles()) {
        if (testCase.isDirectory()) {
            for (File file: testCase.listFiles()) {
                def name = file.getName()
                if (name.endsWith(".err")
                    || name.endsWith(".message")
                    || name.endsWith(".out")
                    || name.endsWith(".score")
                    || name.endsWith(".time")
                    ) {
                    file.delete()
                }
            }
        }
    }
}

